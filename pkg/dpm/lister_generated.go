// Code generated by MockGen. DO NOT EDIT.
// Source: lister.go

// Package dpm is a generated GoMock package.
package dpm

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDeviceLister is a mock of DeviceLister interface
type MockDeviceLister struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceListerMockRecorder
}

// MockDeviceListerMockRecorder is the mock recorder for MockDeviceLister
type MockDeviceListerMockRecorder struct {
	mock *MockDeviceLister
}

// NewMockDeviceLister creates a new mock instance
func NewMockDeviceLister(ctrl *gomock.Controller) *MockDeviceLister {
	mock := &MockDeviceLister{ctrl: ctrl}
	mock.recorder = &MockDeviceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeviceLister) EXPECT() *MockDeviceListerMockRecorder {
	return m.recorder
}

// Discover mocks base method
func (m *MockDeviceLister) Discover() *DeviceMap {
	ret := m.ctrl.Call(m, "Discover")
	ret0, _ := ret[0].(*DeviceMap)
	return ret0
}

// Discover indicates an expected call of Discover
func (mr *MockDeviceListerMockRecorder) Discover() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discover", reflect.TypeOf((*MockDeviceLister)(nil).Discover))
}

// NewDevicePlugin mocks base method
func (m *MockDeviceLister) NewDevicePlugin(arg0 string, arg1 []string) DevicePluginInterface {
	ret := m.ctrl.Call(m, "NewDevicePlugin", arg0, arg1)
	ret0, _ := ret[0].(DevicePluginInterface)
	return ret0
}

// NewDevicePlugin indicates an expected call of NewDevicePlugin
func (mr *MockDeviceListerMockRecorder) NewDevicePlugin(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDevicePlugin", reflect.TypeOf((*MockDeviceLister)(nil).NewDevicePlugin), arg0, arg1)
}
