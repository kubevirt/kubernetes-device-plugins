// Code generated by MockGen. DO NOT EDIT.
// Source: lister.go

// Package dpm is a generated GoMock package.
package dpm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPluginLister is a mock of PluginLister interface
type MockPluginLister struct {
	ctrl     *gomock.Controller
	recorder *MockPluginListerMockRecorder
}

// MockPluginListerMockRecorder is the mock recorder for MockPluginLister
type MockPluginListerMockRecorder struct {
	mock *MockPluginLister
}

// NewMockPluginLister creates a new mock instance
func NewMockPluginLister(ctrl *gomock.Controller) *MockPluginLister {
	mock := &MockPluginLister{ctrl: ctrl}
	mock.recorder = &MockPluginListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginLister) EXPECT() *MockPluginListerMockRecorder {
	return m.recorder
}

// Discover mocks base method
func (m *MockPluginLister) Discover() *PluginList {
	ret := m.ctrl.Call(m, "Discover")
	ret0, _ := ret[0].(*PluginList)
	return ret0
}

// Discover indicates an expected call of Discover
func (mr *MockPluginListerMockRecorder) Discover() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discover", reflect.TypeOf((*MockPluginLister)(nil).Discover))
}

// NewDevicePlugin mocks base method
func (m *MockPluginLister) NewDevicePlugin(arg0 string) DevicePluginInterface {
	ret := m.ctrl.Call(m, "NewDevicePlugin", arg0)
	ret0, _ := ret[0].(DevicePluginInterface)
	return ret0
}

// NewDevicePlugin indicates an expected call of NewDevicePlugin
func (mr *MockPluginListerMockRecorder) NewDevicePlugin(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDevicePlugin", reflect.TypeOf((*MockPluginLister)(nil).NewDevicePlugin), arg0)
}
