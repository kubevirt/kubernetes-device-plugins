// Code generated by MockGen. DO NOT EDIT.
// Source: plugin.go

// Package dpm is a generated GoMock package.
package dpm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	v1alpha "k8s.io/kubernetes/pkg/kubelet/apis/deviceplugin/v1alpha"
)

// MockDevicePluginImplementationInterface is a mock of DevicePluginImplementationInterface interface
type MockDevicePluginImplementationInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDevicePluginImplementationInterfaceMockRecorder
}

// MockDevicePluginImplementationInterfaceMockRecorder is the mock recorder for MockDevicePluginImplementationInterface
type MockDevicePluginImplementationInterfaceMockRecorder struct {
	mock *MockDevicePluginImplementationInterface
}

// NewMockDevicePluginImplementationInterface creates a new mock instance
func NewMockDevicePluginImplementationInterface(ctrl *gomock.Controller) *MockDevicePluginImplementationInterface {
	mock := &MockDevicePluginImplementationInterface{ctrl: ctrl}
	mock.recorder = &MockDevicePluginImplementationInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDevicePluginImplementationInterface) EXPECT() *MockDevicePluginImplementationInterfaceMockRecorder {
	return m.recorder
}

// ListAndWatch mocks base method
func (m *MockDevicePluginImplementationInterface) ListAndWatch(arg0 *v1alpha.Empty, arg1 v1alpha.DevicePlugin_ListAndWatchServer) error {
	ret := m.ctrl.Call(m, "ListAndWatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAndWatch indicates an expected call of ListAndWatch
func (mr *MockDevicePluginImplementationInterfaceMockRecorder) ListAndWatch(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAndWatch", reflect.TypeOf((*MockDevicePluginImplementationInterface)(nil).ListAndWatch), arg0, arg1)
}

// Allocate mocks base method
func (m *MockDevicePluginImplementationInterface) Allocate(arg0 context.Context, arg1 *v1alpha.AllocateRequest) (*v1alpha.AllocateResponse, error) {
	ret := m.ctrl.Call(m, "Allocate", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha.AllocateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allocate indicates an expected call of Allocate
func (mr *MockDevicePluginImplementationInterfaceMockRecorder) Allocate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockDevicePluginImplementationInterface)(nil).Allocate), arg0, arg1)
}

// Start mocks base method
func (m *MockDevicePluginImplementationInterface) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockDevicePluginImplementationInterfaceMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDevicePluginImplementationInterface)(nil).Start))
}

// Stop mocks base method
func (m *MockDevicePluginImplementationInterface) Stop() error {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockDevicePluginImplementationInterfaceMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDevicePluginImplementationInterface)(nil).Stop))
}
