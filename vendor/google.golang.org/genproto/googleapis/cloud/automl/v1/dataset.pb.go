// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/automl/v1/dataset.proto

package automl

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A workspace for solving a single, particular machine learning (ML) problem.
// A workspace contains examples that may be annotated.
type Dataset struct {
	// Required.
	// The dataset metadata that is specific to the problem type.
	//
	// Types that are valid to be assigned to DatasetMetadata:
	//	*Dataset_TranslationDatasetMetadata
	DatasetMetadata isDataset_DatasetMetadata `protobuf_oneof:"dataset_metadata"`
	// Output only. The resource name of the dataset.
	// Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The name of the dataset to show in the interface. The name can be
	// up to 32 characters long and can consist only of ASCII Latin letters A-Z
	// and a-z, underscores
	// (_), and ASCII digits 0-9.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// User-provided description of the dataset. The description can be up to
	// 25000 characters long.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The number of examples in the dataset.
	ExampleCount int32 `protobuf:"varint,21,opt,name=example_count,json=exampleCount,proto3" json:"example_count,omitempty"`
	// Output only. Timestamp when this dataset was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Used to perform consistent read-modify-write updates. If not set, a blind
	// "overwrite" update happens.
	Etag string `protobuf:"bytes,17,opt,name=etag,proto3" json:"etag,omitempty"`
	// Optional. The labels with user-defined metadata to organize your dataset.
	//
	// Label keys and values can be no longer than 64 characters
	// (Unicode codepoints), can only contain lowercase letters, numeric
	// characters, underscores and dashes. International characters are allowed.
	// Label values are optional. Label keys must start with a letter.
	//
	// See https://goo.gl/xmQnxf for more information on and examples of labels.
	Labels               map[string]string `protobuf:"bytes,39,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Dataset) Reset()         { *m = Dataset{} }
func (m *Dataset) String() string { return proto.CompactTextString(m) }
func (*Dataset) ProtoMessage()    {}
func (*Dataset) Descriptor() ([]byte, []int) {
	return fileDescriptor_78541757d26dc96c, []int{0}
}

func (m *Dataset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dataset.Unmarshal(m, b)
}
func (m *Dataset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dataset.Marshal(b, m, deterministic)
}
func (m *Dataset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataset.Merge(m, src)
}
func (m *Dataset) XXX_Size() int {
	return xxx_messageInfo_Dataset.Size(m)
}
func (m *Dataset) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataset.DiscardUnknown(m)
}

var xxx_messageInfo_Dataset proto.InternalMessageInfo

type isDataset_DatasetMetadata interface {
	isDataset_DatasetMetadata()
}

type Dataset_TranslationDatasetMetadata struct {
	TranslationDatasetMetadata *TranslationDatasetMetadata `protobuf:"bytes,23,opt,name=translation_dataset_metadata,json=translationDatasetMetadata,proto3,oneof"`
}

func (*Dataset_TranslationDatasetMetadata) isDataset_DatasetMetadata() {}

func (m *Dataset) GetDatasetMetadata() isDataset_DatasetMetadata {
	if m != nil {
		return m.DatasetMetadata
	}
	return nil
}

func (m *Dataset) GetTranslationDatasetMetadata() *TranslationDatasetMetadata {
	if x, ok := m.GetDatasetMetadata().(*Dataset_TranslationDatasetMetadata); ok {
		return x.TranslationDatasetMetadata
	}
	return nil
}

func (m *Dataset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Dataset) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Dataset) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Dataset) GetExampleCount() int32 {
	if m != nil {
		return m.ExampleCount
	}
	return 0
}

func (m *Dataset) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Dataset) GetEtag() string {
	if m != nil {
		return m.Etag
	}
	return ""
}

func (m *Dataset) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Dataset) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Dataset_TranslationDatasetMetadata)(nil),
	}
}

func init() {
	proto.RegisterType((*Dataset)(nil), "google.cloud.automl.v1.Dataset")
	proto.RegisterMapType((map[string]string)(nil), "google.cloud.automl.v1.Dataset.LabelsEntry")
}

func init() {
	proto.RegisterFile("google/cloud/automl/v1/dataset.proto", fileDescriptor_78541757d26dc96c)
}

var fileDescriptor_78541757d26dc96c = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xdf, 0x6a, 0xd4, 0x40,
	0x14, 0xc6, 0xcd, 0xae, 0xad, 0x38, 0xa9, 0x52, 0x07, 0xad, 0x31, 0x14, 0x8c, 0x7f, 0xc0, 0x80,
	0x30, 0x21, 0xeb, 0x8d, 0xa6, 0xde, 0xd8, 0x55, 0xf4, 0xa2, 0x15, 0x09, 0x65, 0x2f, 0x64, 0x21,
	0x9c, 0xcd, 0x8e, 0x21, 0x38, 0x99, 0x09, 0xc9, 0xc9, 0xe2, 0xbe, 0x52, 0x1f, 0xc5, 0xe7, 0xf0,
	0xca, 0xa7, 0x90, 0xf9, 0x13, 0x5a, 0x8a, 0x7b, 0x77, 0xe6, 0xfc, 0xbe, 0x73, 0xf6, 0x3b, 0xdf,
	0x86, 0xbc, 0xac, 0x94, 0xaa, 0x04, 0x4f, 0x4a, 0xa1, 0x86, 0x75, 0x02, 0x03, 0xaa, 0x46, 0x24,
	0x9b, 0x34, 0x59, 0x03, 0x42, 0xcf, 0x91, 0xb5, 0x9d, 0x42, 0x45, 0x8f, 0xac, 0x8a, 0x19, 0x15,
	0xb3, 0x2a, 0xb6, 0x49, 0xc3, 0x78, 0xc7, 0x34, 0x76, 0x20, 0x7b, 0x01, 0x58, 0x2b, 0x69, 0x37,
	0x84, 0x4f, 0x9d, 0xd2, 0xbc, 0x56, 0xc3, 0x8f, 0x04, 0xeb, 0x86, 0xf7, 0x08, 0x4d, 0xeb, 0x04,
	0xc7, 0x4e, 0x00, 0x6d, 0x9d, 0x80, 0x94, 0x0a, 0xcd, 0x74, 0x6f, 0xe9, 0xf3, 0x3f, 0x53, 0x72,
	0xe7, 0xa3, 0xb5, 0x44, 0x37, 0xe4, 0xf8, 0xda, 0xfe, 0xc2, 0x39, 0x2d, 0x1a, 0x8e, 0xa0, 0xeb,
	0xe0, 0x71, 0xe4, 0xc5, 0xfe, 0x6c, 0xc6, 0xfe, 0xef, 0x99, 0x5d, 0x5c, 0xcd, 0xba, 0x8d, 0xe7,
	0x6e, 0xf2, 0xcb, 0xad, 0x3c, 0xc4, 0x9d, 0x94, 0x52, 0x72, 0x5b, 0x42, 0xc3, 0x03, 0x2f, 0xf2,
	0xe2, 0xbb, 0xb9, 0xa9, 0xe9, 0x33, 0x72, 0xb0, 0xae, 0xfb, 0x56, 0xc0, 0xb6, 0x30, 0x6c, 0x62,
	0x98, 0xef, 0x7a, 0x5f, 0xb5, 0x24, 0x22, 0xfe, 0x9a, 0xf7, 0x65, 0x57, 0xb7, 0x7a, 0x69, 0x30,
	0x75, 0x8a, 0xab, 0x16, 0x7d, 0x41, 0xee, 0xf1, 0x5f, 0xd0, 0xb4, 0x82, 0x17, 0xa5, 0x1a, 0x24,
	0x06, 0x8f, 0x22, 0x2f, 0xde, 0xcb, 0x0f, 0x5c, 0x73, 0xae, 0x7b, 0xf4, 0x84, 0xf8, 0x65, 0xc7,
	0x01, 0x79, 0xa1, 0x93, 0x0b, 0xee, 0x9b, 0x23, 0xc3, 0xf1, 0xc8, 0x31, 0x56, 0x76, 0x31, 0xc6,
	0x9a, 0x13, 0x2b, 0xd7, 0x0d, 0x6d, 0x9d, 0x23, 0x54, 0xc1, 0x03, 0x6b, 0x5d, 0xd7, 0x74, 0x4e,
	0xf6, 0x05, 0xac, 0xb8, 0xe8, 0x83, 0x57, 0xd1, 0x34, 0xf6, 0x67, 0xaf, 0x77, 0x05, 0xe6, 0x72,
	0x60, 0x67, 0x46, 0xfd, 0x49, 0x62, 0xb7, 0xcd, 0xdd, 0x68, 0xf8, 0x8e, 0xf8, 0xd7, 0xda, 0xf4,
	0x90, 0x4c, 0x7f, 0xf2, 0xad, 0x4b, 0x48, 0x97, 0xf4, 0x21, 0xd9, 0xdb, 0x80, 0x18, 0xc6, 0x64,
	0xec, 0x23, 0x9b, 0xbc, 0xf5, 0x4e, 0x29, 0x39, 0xbc, 0xf9, 0xd7, 0x9d, 0x5e, 0x7a, 0x24, 0x2c,
	0x55, 0xb3, 0xc3, 0xc9, 0x37, 0xef, 0xfb, 0x7b, 0x47, 0x2a, 0x25, 0x40, 0x56, 0x4c, 0x75, 0x55,
	0x52, 0x71, 0x69, 0xae, 0x4f, 0x2c, 0x82, 0xb6, 0xee, 0x6f, 0x7e, 0x8f, 0x27, 0xb6, 0xba, 0x9c,
	0x1c, 0x7d, 0xb6, 0xe3, 0x73, 0xb3, 0xf8, 0xc3, 0x80, 0xea, 0xfc, 0x8c, 0x2d, 0xd2, 0xdf, 0x23,
	0x58, 0x1a, 0xb0, 0xb4, 0x60, 0xb9, 0x48, 0xff, 0x4e, 0x9e, 0x58, 0x90, 0x65, 0x86, 0x64, 0x99,
	0x45, 0x59, 0xb6, 0x48, 0x57, 0xfb, 0xe6, 0x67, 0xdf, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x5a,
	0xf5, 0x66, 0x47, 0x43, 0x03, 0x00, 0x00,
}
